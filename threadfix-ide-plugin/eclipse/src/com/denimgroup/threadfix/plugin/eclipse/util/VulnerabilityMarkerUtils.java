////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2013 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.plugin.eclipse.util;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.texteditor.MarkerUtilities;

public class VulnerabilityMarkerUtils {
	
	public static final String
		PROBLEM_TYPE = "com.denimgroup.threadfix.plugin.eclipse.vulnMarker",
		ECLIPSE_PROBLEM_TYPE = "org.eclipse.core.resources.problemmarker";
	
	public static void createMarker(IResource resource, VulnerabilityMarker marker) throws CoreException {
		Map<String, Object> attribs = new HashMap<>();
		
	    attribs.put(IMarker.SEVERITY, IMarker.SEVERITY_WARNING);
	    attribs.put(IMarker.LINE_NUMBER, marker.lineNumber);
	    attribs.put(IMarker.MESSAGE, marker.toString());
	    attribs.put("cwe", String.valueOf(marker.cweId));
	    attribs.put("cweName", marker.cweText);
	    attribs.put("parameter", marker.parameter);
	    attribs.put("defectId", marker.defectId);
	    attribs.put("defectUrl", marker.defectUrl);
	    
	    MarkerUtilities.createMarker(resource, attribs, PROBLEM_TYPE);
	}
	
	public static void clearMarkers(IResource resource) throws CoreException {
		for (IMarker marker : getMarkers(resource)) {
			marker.delete();
		}
	}
	
	public static IMarker[] getMarkers(IResource target) throws CoreException {
	    return target.findMarkers(PROBLEM_TYPE, true, IResource.DEPTH_INFINITE);
	}

	public static void clearAllMarkers() {
		try {
			List<IFile> files = WorkspaceUtils.getAllFiles();
			
			for (IFile file : files) {
				clearMarkers(file);
			}
		} catch (CoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void addMarkersToFiles(
			List<VulnerabilityMarker> vulnerabilityMarkers,
			Map<String, Set<IFile>> files) {
		
		for (VulnerabilityMarker marker : vulnerabilityMarkers) {
			if (marker.getShortClassName() != null && files.get(marker.getShortClassName()) != null) {
				
				IFile file = calculateBestOption(
						breakUpPath(marker.className), files.get(marker.getShortClassName()));

				add(file, marker);
			}
		}
	}
	
	// score all the items in the set of choices against the given path segments
	private static IFile calculateBestOption(String[] pathSegments, Set<IFile> choices) {
		IFile returnOption = null;
		
		int highestScore = -1;
		
		for (IFile choice : choices) {
			if (choice != null) {
				int choiceScore = calculateScore(breakUpPath(choice), pathSegments);
				if (choiceScore > highestScore) {
					returnOption = choice;
					highestScore = choiceScore;
					if (choiceScore == pathSegments.length) {
						break;
					}
				}
			}
		}
		
		return returnOption;
	}
	
	// calculates the length of the common end elements
	private static int calculateScore(String[] option, String[] path) {
		int score = 0;
		
		if (option != null && option.length != 0 &&
				path != null && path.length != 0) {
			int optionIndex = option.length - 1, pathIndex = path.length - 1;
			
			while (optionIndex >= 0 && pathIndex >= 0) {
				if (option[optionIndex].equals(path[pathIndex])) {
					score += 1;
					optionIndex -= 1;
					pathIndex -= 1;
				} else {
					break;
				}
			}
		}
		
		return score;
	}

	private static String[] breakUpPath(IFile file) {
		return breakUpPath(file.getFullPath().toString());
	}
	
	private static String[] breakUpPath(String choice) {
		String[] results;
		
		if (choice.indexOf('/') != -1) {
			results = choice.split("/");
		} else if (choice.indexOf('\\') != -1) {
			results = choice.split("\\\\");
		} else {
			results = new String[] { choice };
		}

		return results;
	}
	
	private static void add(IFile file, VulnerabilityMarker marker) {
		try {
			if (file != null) {
				VulnerabilityMarkerUtils.createMarker(file, marker);
			}
		} catch (PartInitException e) {
			e.printStackTrace();
		} catch (CoreException e) {
			e.printStackTrace();
		}
	}
	
}
