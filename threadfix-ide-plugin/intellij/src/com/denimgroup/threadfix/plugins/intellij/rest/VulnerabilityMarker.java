////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2013 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.plugins.intellij.rest;

public class VulnerabilityMarker {
	
	private static final int NUM_PARTS = 7;
	private static final String NUM_REGEX = "^[0-9]+$";

	public final String className, cweText, parameter,defectUrl,defectId;
	public final int lineNumber, cweId;
	private final String[] classNameParts;
	
	
	private VulnerabilityMarker(String className, int lineNumber, String parameter, int cweId, String cweText, String defectId, String defectUrl) {
		this.className = className;
		this.cweText = cweText;
		this.lineNumber = lineNumber;
		this.cweId = cweId;
		this.parameter = parameter;
		this.classNameParts = className.split("/");
		this.defectId = defectId;
		this.defectUrl = defectUrl;
	}
	
	public String getShortClassName() {
		if (classNameParts.length > 0) {
			return classNameParts[classNameParts.length - 1];
		} else {
			return null;
		}
	}
	
	public static VulnerabilityMarker getMarker(String[] csvLine) {
		if (csvLine != null &&
				csvLine.length == NUM_PARTS &&
				csvLine[0] != null &&
				!csvLine[0].equals("null") &&
				csvLine[1].matches(NUM_REGEX) &&
				csvLine[1] != "-1" &&
				csvLine[3].matches(NUM_REGEX)) {
			return new VulnerabilityMarker(csvLine[0], Integer.valueOf(csvLine[1]), csvLine[2], Integer.valueOf(csvLine[3]), csvLine[4], csvLine[5], csvLine[6]);
		} else {
			return null;
		}
	}

	@Override
	public String toString() {
		String returnString = "There is a vulnerability here. CWE " + cweText 
				+ " (cwe.mitre.org/data/definitions/" + cweId + ".html), parameter: " + parameter;
		if(!defectUrl.equals(" ")){
			returnString = returnString + ", defect: " + defectUrl;
		}
		return returnString;
	}
}
